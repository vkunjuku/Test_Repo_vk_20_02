# Databricks notebook source
from pyspark.sql.functions import explode, sequence, to_date

beginDate = "2000-01-01"
endDate = "2050-12-31"

(
    spark.sql(
        f"select explode(sequence(to_date('{beginDate}'), to_date('{endDate}'), interval 1 day)) as calendarDate"
    ).createOrReplaceTempView("dates")
)

# COMMAND ----------

create_date_dim_sql_stmt = f""" CREATE OR REPLACE TABLE dlt_bronze.dateDim AS
select  year(calendarDate) * 10000 + month(calendarDate) * 100 + day(calendarDate) as dateSID,
"autoGenerated" as rowSourceSID,
current_date as rowCreationDate,
 '0' as rowRunIdentifier,
  date_format(calendarDate, 'dd/MM/yyyy') as calendarDate,
  dayofmonth(calendarDate) as calendarDayOfMonth,
   case when month(calendarDate) in (1,3,5,7,8,10,12) then 31
   when month(calendarDate)==2 and mod(year(calendarDate), 4)==0 then 29
   when month(calendarDate)==2 and mod(year(calendarDate), 4)!=0 then 28
   else 30 END as    calendarDaysInMonth,
   month(calendarDate) as calendarMonth,
   date_format(calendarDate, 'MMMM') as calendarMonthName,
  date_format(calendarDate, 'MMM') as calendarMonthShortName,
    quarter(calendarDate) as calendarQuarter,
    case when quarter(calendarDate)==1 then 'Jan-Mar'
    when quarter(calendarDate)==2 then 'Apr-Jun'
    when quarter(calendarDate)==3 then 'Jul-Sep'
    else 'Oct-Dec' end as calendarQuarterName,
   date_format(calendarDate, 'MMM-yy') as calendarShortMonthYear,
   weekofyear(calendarDate) as calendarWeek,
   year(calendarDate) AS calendarYear,
  date_format(calendarDate, 'yyyyMM') calendarYearMonth,
  concat(date_format(calendarDate, 'yyyy'),'Q',quarter(calendarDate)) as calendarYearQuarter,
  case when year(calendarDate)==year(current_date) then 'Y' else 'N' end as currentCalendarYearInd,
  ----*********currentFinancialYearInd
  case when month(calendarDate)==month(current_date) then 'Y' else 'N' end as currentMonthInd,
  case when quarter(calendarDate)==quarter(current_date) then 'Y' else 'N' end as currentQuarterInd,
  calendarDate as dateISO,
  date_format(calendarDate, 'dd/MM/yyyy hh:mm:ss') as dateKey,
  date_format(calendarDate,'yyyyMMdd') as dateReverse,
  date_format(calendarDate,'E') AS dayOfWeek,
  case when month(calendarDate)>=7 then month(calendarDate)-6 else month(calendarDate)+6 end as financialPeriod,
    case when quarter(calendarDate)==3 then '1'
    when quarter(calendarDate)==4 then '2'
    when quarter(calendarDate)==1 then '3'
    else '4' end as financialQuarter,
    case when quarter(calendarDate)==3 then 'Jul-Sep'
    when quarter(calendarDate)==4 then 'Oct-Dec'
    when quarter(calendarDate)==1 then 'Jan-Mar'
    else 'Apr-Jun' end as financialQuarterName,
    case when month(calendarDate)>=7 then int(ceiling(datediff(calendarDate, concat(year(calendarDate),'-07-01'))/7))
    else int(ceiling(datediff(calendarDate, concat(year(calendarDate)-1,'-07-01'))/7))
    end as financialWeek,
    case when month(calendarDate)>=7 then year(calendarDate) else year(calendarDate)-1 end as financialYear,
    case when month(calendarDate)>=7 then concat(year(calendarDate),'-', int(date_format(calendarDate,'yy')+1)) else concat(year(calendarDate)-1,'-', date_format(calendarDate,'yy')) end as financialYearName,
    case when month(calendarDate)>=7 then concat(year(calendarDate),lpad(month(calendarDate)-6,2,'0')) else concat(year(calendarDate)-1,lpad(month(calendarDate)+6,2,'0'))  end as financialYearPeriod,
    case when quarter(calendarDate)==3 then concat(year(calendarDate),'01')
    when quarter(calendarDate)==4 then concat(year(calendarDate),'02')
    when quarter(calendarDate)==1 then concat(year(calendarDate)-1,'03')
    else concat(year(calendarDate)-1,'04') end as  financialYearQuarter,
      case
    when calendarDate == last_day(calendarDate) then 'Y'
    else 'N'
  end as lastDayOfMonthInd,
case when current_date= calendarDate then 'Y' else 'N' end as todayInd,
case when current_date+1= calendarDate then 'Y' else 'N' end as tomorrowInd,
case when date_format(calendarDate,'E') in ('Sat','Sun') then 'Y' else 'N' end as weekendInd,
case when current_date-1= calendarDate then 'Y' else 'N' end as yesterdayInd
from
  dates --where calendarDate='2022-06-30'
order by
  calendarDate"""
spark.sql(create_date_dim_sql_stmt)
